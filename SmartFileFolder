#include <SoftwareSerial.h>
#include <TinyGPS++.h>
#include <SPI.h>
#include <MFRC522.h>
#include <Servo.h>

TinyGPSPlus gps;
Servo s1;
#define RST_PIN 9          // Configurable, see typical pin layout above
#define SS_PIN 10          // Configurable, see typical pin layout above
#define BUZZER_PIN 7
#define ALED_PIN 5
#define ULED_PIN 3
#define RxPin 6  
#define TxPin 7
int count=0;
static const uint32_t GPSBaud =9600;
MFRC522 mfrc522(SS_PIN, RST_PIN);  // Create MFRC522 instance
SoftwareSerial GPS(RxPin,TxPin);
void setup() {
  pinMode(ALED_PIN, OUTPUT);
  pinMode(ULED_PIN, OUTPUT); 
  pinMode(BUZZER_PIN, OUTPUT);
	Serial.begin(9600);		// Initialize serial communications with the PC
	while (!Serial);		// Do nothing if no serial port is opened (added for Arduinos based on ATMEGA32U4)
	SPI.begin();			// Init SPI bus
	mfrc522.PCD_Init();		// Init MFRC522
	mfrc522.PCD_DumpVersionToSerial();	// Show details of PCD - MFRC522 Card Reader details
	Serial.println(F("Scan PICC to see UID, SAK, type, and data blocks..."));
  s1.attach(2);
  s1.write(150);
  GPS.begin(GPSBaud);
}

void loop() {
	// Reset the loop if no new card present on the sensor/reader. This saves the entire process when idle.
  delay(1000);
	if (!mfrc522.PICC_IsNewCardPresent()) {
		return;
	}

	// Select one of the cards
	if (!mfrc522.PICC_ReadCardSerial()) {
		return;
	}
  
  Serial.print("UID Tag:");
  String content = "";
  for (byte i = 0; i < mfrc522.uid.size; i++) {
    Serial.print(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " ");
    Serial.print(mfrc522.uid.uidByte[i], HEX);
    content.concat(String(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " "));
    content.concat(String(mfrc522.uid.uidByte[i], HEX));
  }
  Serial.println("");
  Serial.print("Message :");
  content.toUpperCase();
  
  if (content.substring(1) == "2B D8 DE 11") {
    count+=1;
    Serial.println("Authorized Access");
    
    if(count%2!=0)
    {
      s1.write(55);
    }
    else
    {
      s1.write(150);
    }
    Serial.println(count);
    digitalWrite(ALED_PIN, HIGH);
    digitalWrite(ULED_PIN, LOW);
  } else {
    Serial.println("Unauthorized Access");
    s1.write(150);
    digitalWrite(ULED_PIN, HIGH);
    digitalWrite(ALED_PIN, LOW);
  }
  while (GPS.available()>0) {
    gps.encode(GPS.read());
    if(gps.location.isUpdated())
    {
      Serial.print("Latitude =");
      Serial.print(gps.location.lat(),6);
      Serial.print("Longitude =");
      Serial.print(gps.location.lng(),6);
    }
  }
}
